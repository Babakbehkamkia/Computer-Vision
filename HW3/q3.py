# -*- coding: utf-8 -*-
"""Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vY6Q0A5n8rCk1Mle9_dLJSfI7h1TUufd
"""

# Import Your Libraries
import numpy as np
import matplotlib.pyplot as plt
from skimage.exposure import match_histograms

"""## Part 1"""

# website : https://scikit-image.org/docs/stable/auto_examples/color_exposure/plot_histogram_matching.html
from skimage.exposure import match_histograms
source = plt.imread('A Plague Tale.jpg')
reference = plt.imread('Hades.jpg')

print(source.shape)
print(reference.shape)

### YOUR CODE ###
# START
matched = match_histograms(source, reference, multichannel=True)
# END

fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(14, 14),
                                    sharex=True, sharey=True)
for aa in (ax1, ax2, ax3):
    aa.set_axis_off()

ax1.imshow(source)
ax1.set_title('Source')
ax2.imshow(reference)
ax2.set_title('Reference')
ax3.imshow(matched)
ax3.set_title('Matched')

plt.tight_layout()
plt.show()

"""## Part 2"""

def binarySearch(val, data):
    lo, hi = 0, len(data) - 1
    best_ind = lo
    while lo <= hi:
        mid = lo + (hi - lo) // 2
        if data[mid] < val:
            lo = mid + 1
        elif data[mid] > val:
            hi = mid - 1
        else:
            best_ind = mid
            break
        if abs(data[mid] - val) < abs(data[best_ind] - val):
            best_ind = mid
    return best_ind

def compute_match(s_values, s_cumulative, r_values, r_cumulative):
  mapping = {}
  for i in range(len(s_cumulative)):
    index = binarySearch(s_cumulative[i], r_cumulative)
    mapping[s_values[i]] = index
  return mapping

def hist_matching(src_image, ref_image):
  '''
  inputs:
    src_image (ndarray): source image
    ref_image (ndarray): reference image
  output:
    output_image (ndarray): transformed image 
  '''
  
  ### YOUR CODE ###
  # START
  matched = []
  s_values, s_counts = np.unique(src_image, return_counts=True)
  r_values, r_counts = np.unique(ref_image, return_counts=True)

  # print(len(s_values))
  # print(len(r_values))

  s_cumulative = np.cumsum(s_counts, axis=0)
  r_cumulative = np.cumsum(r_counts, axis=0)
  
  mapping = compute_match(s_values, s_cumulative, r_values, r_cumulative)
  # channel = []
  # print(src_image[dim])
  # for i in range(len(src_image[dim])):
  #   channel.append(mapping[src_image[dim][i]])
  channel = np.vectorize(mapping.get)(src_image)
  # print(channel)
  # matched.append(channel)
  # END
  # print(matched)
  return channel

source = plt.imread('A Plague Tale.jpg')
reference = plt.imread('Hades.jpg')

# print(source)
### YOUR CODE ###
# START
matched = hist_matching(source, reference)
# print(matched)
# END

fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(14, 14),
                                    sharex=True, sharey=True)
for aa in (ax1, ax2, ax3):
    aa.set_axis_off()

ax1.imshow(source)
ax1.set_title('Source')
ax2.imshow(reference)
ax2.set_title('Reference')
ax3.imshow(matched)
ax3.set_title('my_Matched')

plt.tight_layout()
plt.show()

"""## Part 3"""

source = plt.imread('Hades.jpg')
reference = plt.imread('A Plague Tale.jpg')

### YOUR CODE ###
# START
matched = hist_matching(source, reference)
# END

fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(14, 14),
                                    sharex=True, sharey=True)
for aa in (ax1, ax2, ax3):
    aa.set_axis_off()

ax1.imshow(source)
ax1.set_title('Source')
ax2.imshow(reference)
ax2.set_title('Reference')
ax3.imshow(matched)
ax3.set_title('my_Matched')

plt.tight_layout()
plt.show()

# =================================


### YOUR CODE ###
# START
matched = match_histograms(source, reference, multichannel=True)
# END

fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(14, 14),
                                    sharex=True, sharey=True)
for aa in (ax1, ax2, ax3):
    aa.set_axis_off()

ax1.imshow(source)
ax1.set_title('Source')
ax2.imshow(reference)
ax2.set_title('Reference')
ax3.imshow(matched)
ax3.set_title('Matched')

plt.tight_layout()
plt.show()

